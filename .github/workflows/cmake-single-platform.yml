# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: install dependencies
      run: sudo apt-get update && sudo apt-get upgrade -y && 
           sudo apt-get install -y build-essential cmake autoconf libtool pkg-config libgrpc++-dev 
           libprotobuf-dev protobuf-compiler-grpc protobuf-compiler

    - name: Get investAPI
      run: git submodule update --init --recursive --remote --merge

    - name: Clean build directory
      run: rm -rf ${{github.workspace}}/build

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -G "Unix Makefiles" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -S ${{github.workspace}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j$(nproc)

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Prepare artifacts
      run: |
        mkdir -p artifacts/build
        # Copy build libraries
        cp build/*.so artifacts/build/ 2>/dev/null || true
        cp build/*.a artifacts/build/ 2>/dev/null || true
        # Copy headers
        mkdir -p artifacts/include
        cp *.h artifacts/include/ 2>/dev/null || true
        cp services/*.h artifacts/include/ 2>/dev/null || true
        cp build/*.h artifacts/include/ 2>/dev/null || true
        # Create a summary of what was built
        echo "Build completed on $(date)" > artifacts/build-info.txt
        echo "Platform: ubuntu-22.04" >> artifacts/build-info.txt
        echo "Build Type: ${{env.BUILD_TYPE}}" >> artifacts/build-info.txt

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tinkoff-invest-sdk-${{env.BUILD_TYPE}}-${{github.sha}}
        path: artifacts/
        retention-days: 30
        if-no-files-found: warn
